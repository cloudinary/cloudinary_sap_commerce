<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security 
		http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/security/oauth2 
     	http://www.springframework.org/schema/security/spring-security-oauth2.xsd">

    <!-- Security OAuth2 -->

    <beans>
        <bean id="hybrisUserFilter" class="uk.ptr.cloudinary.oauth2.HybrisOauth2UserFilter"/>

        <authentication-manager alias="authenticationManager" xmlns="http://www.springframework.org/schema/security">
            <authentication-provider ref="wsAuthenticationProvider" />
        </authentication-manager>

        <bean id="oauthAuthenticationEntryPoint"
              class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
            <property name="realmName" value="hybris"/>
            <property name="exceptionRenderer" ref="oAuth2ExceptionRenderer"/>
        </bean>

        <bean id="oauthAccessDeniedHandler"
              class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler">
            <property name="exceptionRenderer" ref="oAuth2ExceptionRenderer"/>
        </bean>

        <bean id="oAuth2ExceptionRenderer" class="de.hybris.platform.webservicescommons.oauth2.OAuth2ExceptionRenderer">
            <property name="messageConverters" ref="messageConvertersV1"/>
            <property name="exceptionConverter" ref="exceptionConverter"/>
        </bean>

        <bean id="webSecurityAccessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
            <constructor-arg name="decisionVoters">
                <list>
                    <bean class="uk.ptr.cloudinary.oauth2.OAuthClientVoter"/>
                    <bean id="roleVoter" class="org.springframework.security.access.vote.RoleVoter"/>
                    <bean id="authenticatedVoter" class="org.springframework.security.access.vote.AuthenticatedVoter"/>
                </list>
            </constructor-arg>
        </bean>

        <bean id="fixation"
              class="de.hybris.platform.servicelayer.security.spring.HybrisSessionFixationProtectionStrategy"/>

        <oauth:resource-server id="resourceServerFilter" resource-id="hybris" token-services-ref="oauthTokenServices"
                               entry-point-ref="oauthAuthenticationEntryPoint"/>

        <security:global-method-security pre-post-annotations="enabled" proxy-target-class="true"
                                         secured-annotations="enabled"
                                         access-decision-manager-ref="methodSecurityAccessDecisionManager">
            <security:expression-handler ref="oauthExpressionHandler"/>
        </security:global-method-security>

        <oauth:expression-handler id="oauthExpressionHandler"/>

        <oauth:web-expression-handler id="oauthWebExpressionHandler"/>

        <!-- global method security access decission manager config -->
        <bean id="methodSecurityAccessDecisionManager"
              class="org.springframework.security.access.vote.AffirmativeBased">
            <constructor-arg>
                <list>
                    <bean class="org.springframework.security.access.prepost.PreInvocationAuthorizationAdviceVoter">
                        <constructor-arg ref="expressionBasedPreInvocationAdvice"/>
                    </bean>
                    <bean class="uk.ptr.cloudinary.oauth2.OAuthClientVoter"/>
                    <bean class="org.springframework.security.access.vote.RoleVoter"/>
                    <bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
                </list>
            </constructor-arg>
        </bean>

        <bean id="expressionBasedPreInvocationAdvice"
              class="org.springframework.security.access.expression.method.ExpressionBasedPreInvocationAdvice">
            <property name="expressionHandler" ref="expressionHandler"/>
        </bean>

        <bean id="expressionHandler"
              class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler"/>

    </beans>
</beans>
